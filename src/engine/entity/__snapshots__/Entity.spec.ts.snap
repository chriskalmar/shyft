// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Entity attributes should catch invalid attribute names 1`] = `"Invalid attribute name 'wrong-named-attribute' in entity 'SomeEntityName' (Regex: /^[a-zA-Z][a-zA-Z0-9_]*$/)"`;

exports[`Entity attributes should reject an empty attributes map 1`] = `"Entity 'SomeEntityName' has no attributes defined"`;

exports[`Entity attributes should reject attributes with missing or invalid data type 1`] = `"'SomeEntityName.someAttribute' has invalid data type 'undefined'"`;

exports[`Entity attributes should reject attributes without a description 1`] = `"Missing description for 'SomeEntityName.someAttribute'"`;

exports[`Entity attributes should throw if provided with an invalid defaultValue function 1`] = `"'SomeEntityName.someAttribute' has an invalid defaultValue function'"`;

exports[`Entity attributes should throw if provided with an invalid resolve function 1`] = `"'SomeEntityName.someAttribute' has an invalid resolve function'"`;

exports[`Entity attributes should throw if provided with an invalid validate function 1`] = `"'SomeEntityName.someAttribute' has an invalid validate function'"`;

exports[`Entity isEntity should recognize non-Entity objects 1`] = `"Not an Entity object"`;

exports[`Entity permissions should throw if empty permissions are provided 1`] = `"Entity 'SomeEntityName' has one or more empty permission definitions in: read, find, mutations.delete"`;

exports[`Entity preProcessor should have a valid postProcessor function 1`] = `"postProcessor of entity 'SomeEntityName' needs to be a valid function"`;

exports[`Entity preProcessor should have a valid preProcessor function 1`] = `"preProcessor of entity 'SomeEntityName' needs to be a valid function"`;

exports[`Entity preProcessor should pass through postProcessor if it is declared 1`] = `
Object {
  "data": Object {
    "allSomeOtherEntityNames": Object {
      "edges": Array [
        Object {
          "node": Object {
            "id": "1",
            "something": "someotherthing",
          },
        },
      ],
    },
  },
}
`;

exports[`Entity preProcessor should pass through preProcessor if it is declared 1`] = `
Object {
  "data": Object {
    "allSomeEntityNames": Object {
      "edges": Array [
        Object {
          "node": Object {
            "id": "1",
            "something": "something",
          },
        },
      ],
    },
  },
}
`;

exports[`Entity primary attribute should catch multiple primary attributes 1`] = `"'SomeEntityName.anotherAttribute' cannot be set as primary attribute,'someAttribute' is already the primary attribute"`;

exports[`Entity primary attribute should catch primary attributes with invalid data types 1`] = `"Primary attribute 'City.someAttribute' has invalid data type 'Country'"`;

exports[`Entity references should throw if invalid attribute is to be referenced 1`] = `"Cannot reference attribute 'Country.notHere' as it does not exist"`;

exports[`Entity should accept only maps or functions as attributes definition 1`] = `"'attributes' for entity 'Example' needs to be a map of attributes or a function returning a map of attributes"`;

exports[`Entity should have a description 1`] = `"Missing description for entity 'Example'"`;

exports[`Entity should have a map of attributes 1`] = `"'attributes' for entity 'Example' needs to be a map of attributes or a function returning a map of attributes"`;

exports[`Entity should have a name 1`] = `"Missing entity name"`;

exports[`Entity should reject non-map results of attribute definition functions 1`] = `"Attribute definition function for entity 'Example' does not return a map"`;

exports[`Entity should throw if invalid storage type was provided 1`] = `"Entity 'Example' needs a valid storage type (defaults to 'StorageTypeNull')"`;

exports[`Entity states should throw if provided with an invalid map of states 1`] = `"Entity 'SomeEntityName' states definition needs to be a map of state names and their unique ID"`;

exports[`Entity states should throw if state IDs are not unique 1`] = `"Each state defined in entity 'SomeEntityName' needs to have a unique ID"`;

exports[`Entity states should throw on invalid state IDs 1`] = `"State 'open' in entity 'SomeEntityName' has an invalid unique ID (needs to be a positive integer)"`;

exports[`Entity states should throw on invalid state IDs 2`] = `"State 'open' in entity 'SomeEntityName' has an invalid unique ID (needs to be a positive integer)"`;

exports[`Entity states should throw on invalid state IDs 3`] = `"State 'open' in entity 'SomeEntityName' has an invalid unique ID (needs to be a positive integer)"`;

exports[`Entity states should throw on invalid state IDs 4`] = `"State 'open' in entity 'SomeEntityName' has an invalid unique ID (needs to be a positive integer)"`;

exports[`Entity states should throw on invalid state names 1`] = `"Invalid state name 'bad-state-name' in entity 'SomeEntityName' (Regex: /^[a-zA-Z][_a-zA-Z0-9]*$/)"`;

exports[`Entity system attributes should throw if user defined attribute name collides with a system attribute name 1`] = `"Attribute name collision with system attribute 'updatedAt' in entity 'SomeEntityName'"`;
